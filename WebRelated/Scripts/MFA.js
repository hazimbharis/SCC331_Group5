var messageBox = document.getElementById('Message-Container-SignUp');

function validateCredentials(email, password) {
    const desiredPasswordLength = 8;
    // Check if email and password are empty
    if (!email.trim() || !password.trim()) {
        messageBox.innerHTML = 'Email and password cannot be empty';
        return false;
    }
    //Regular expression for email containg an @ and dot. Also checks for whitespaces
    var emailPattern = /^[^\s@]+@[^\s@]+\.[^\s@]+$/; 
    // Check if email matches the pattern
    if (!emailPattern.test(email)) {
        messageBox.innerHTML = 'Invalid email format';
        return false;
    }
    return true
} 
async function genQRCode() {
    var email = document.getElementById('email').value;
    var pWord = document.getElementById('password').value;
    console.log(email);
    console.log(pWord);
    const credentialsValid = await checkcredentials(email, pWord);

    // Check if credentials are valid
    if (!validateCredentials(email, pWord) || !credentialsValid) {
        console.log("Credentials are invalid");
        return;
    }
    
    console.log("GOT HERE");
    // Clear the form box content
    var formBox = document.getElementById('form-container-box');
    formBox.innerHTML = '';
    formBox.style.height = "30vh";
    if (formBox) {
        document.body.removeChild(formBox);
    }

    var instructionsDiv = document.getElementById('Instructions');
    var newH2 = document.createElement('h2');
    newH2.innerHTML = `
    1. On your smartphone, open your authenticator app.<br>
    2. In the app, find the option to "Scan QR Code" or "Add Account."<br>
    3. Use your phone's camera to scan the QR code displayed below.<br>
    4. Save the account in your authenticator app.<br>
    5. Use MFA code generated by your app to login in the future.<br>`;
    newH2.style.textAlign = 'center';
    instructionsDiv.style.border = '2px solid #ccc';
    instructionsDiv.style.borderRadius = '10px';
    instructionsDiv.style.padding = '0px';
    instructionsDiv.style.width = '54vw';
    instructionsDiv.style.display = 'flex';
    instructionsDiv.style.justifyContent = 'center';
    instructionsDiv.style.alignItems = 'center';
    instructionsDiv.style.margin = '80px auto'; 
    instructionsDiv.style.marginBottom = '50px';
    instructionsDiv.style.boxShadow = '0 4px 8px 0 rgba(0,0,0,0.2)';
    instructionsDiv.appendChild(newH2);
    //document.body.appendChild(newDiv);
    // Generate a secret key
    const secretKey = otplib.authenticator.generateSecret();

    // Generate a QR code for the secret key
    const otpauthURL = otplib.authenticator.keyuri('joetyework@outlook.com', 'Super User', secretKey);
    const qr = qrcode(0, 'M');
    qr.addData(otpauthURL);
    qr.make();
    const qrCodeElement = document.getElementById('qr-code');
    qrCodeElement.innerHTML = qr.createImgTag(16, 0); // Adjust size here
    console.log(secretKey);
    console.log("EMAILLLL: " +email);
    storeSecretKey(secretKey, email);        
}
function checkcredentials(e, p) {
    return new Promise((resolve, reject) => {
        fetch('http://localhost:5000/api/CheckCredentials', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({
                credentials: {
                    email: e,
                    password: p,
                }
            })
        })
        .then(response => {
            if (!response.ok) {
                throw new Error('Network response was not ok');
            }
            return response.json();
        })
        .then(data => {
            if (data.message === "Login successful") {
                messageBox.style.color = 'green';
                messageBox.innerHTML = data.message;
                console.log(data); // Display the response data
                resolve(true); // Resolve the promise with true
            } else {
                messageBox.style.color = 'red';
                messageBox.innerHTML = "Login Failed";
                resolve(false); // Resolve the promise with false
            }
        })
        .catch(error => {
            messageBox.style.color = 'red';
            messageBox.innerHTML = "Login Failed";
            console.error('There was a problem with the fetch operation:', error);
            reject(error); // Reject the promise with the error
        });  
    });
}

function storeSecretKey(secretKey, email){
    fetch('http://localhost:5000/api/updateUserSecretKey/' + email, {
        method: "POST",
        headers: {
            "Content-Type": "application/json"
        },
        body: JSON.stringify({
            secretKey: secretKey,
        })
    })
    .then(response => {
        if (!response.ok) {
            messageBox.style.color = 'red';
            messageBox.innerHTML = "MFA Already enabled";
            throw new Error('Network response was not ok');

        }
        return response.json();
    })
    .then(data => {
        console.log(data.message); // Display the response message
    })
    .catch(error => {
        console.error('There was a problem with the fetch operation:', error);
        // Check if the error status is 400 and if it contains the specific error message
        if (error.response && error.response.status === 400 && error.response.data && error.response.data.error === 'Secret key is already set') {
            console.error('Secret key is already set');
        }
    });
}

